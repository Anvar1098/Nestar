// AppModule => Loyihani markaziy bo'gichi (yani hammasini oz ichiga oladi)
// Har bir Modulni oz MVC si borligi uchun app.controller va app.moduldan foydalanmiymiz!
// app.controllerda masalan standard mantiqla yozamiz => server is running and etc..
// Modelar ni farqi serverlar soni bilan olchanadi!
// Standard Mode => Yagona serverli loyiha
// Monorepo Mode => Kop repository lik boladi (Yagona GitHub) => multi server
// Batch server => masalan kunni malum bir qismida malum vazifani bajarib chikib ketadi (bunga tashqaridan request kelmaydi)
// Batch server => aytilgan paytda ishga tushib , vazifasini yakunlaydi
// NestJs => server side application framework va ingridientlari orqali tashkilashtirdi, AOP asosi bu => module!
// GraphQl API da endpoint bolmaydi va mutation va query orqali method nomi bilan boglanadi!
// Demak GraphQL da automatic error handling borligi sababli try catch bolmaydi!  (App.module ichida formatError bor)!
// MVC ni (API) ishga tushirishdan oldin  modullarga wrap qildik, shuni uchun modular tizim tez ishlayid => AOP muhim konsepsiyasi!





// class + interface => implements
// class + class => extends
// interface + interface => extends 


// Aslida bizga korinmagan state va methodlar hosil bulmoqda ApModule class ichida
// MetaData => yashirin sourceni olib yuklash
// Dependency Injection => Tezlikni oshiradi
// NESTJs => AOP ustiga qurilgan
// ConfigModule => External package (biz uchun tayyor package)
// GraphQLModule =>  External package (biz uchun tayyor package)
// ConfigModule.forRoot() => ildiz otishi
// Rest Api & GraphQL API => HTTP ustiga qurilgan
// GraphQL API => bir request orqali hamma kerakli infoni yigib kelish mumkin backenddan!
// formatError => vazifasi Errorlarni togri formatlash!